import React, { useState } from 'react';
import { Shield, Lock, Key, AlertTriangle } from 'lucide-react';

const ZBPMCryptography = () => {
  const [activeTab, setActiveTab] = useState('encryption');
  const [message, setMessage] = useState('HELLO ZBPM');
  const [key, setKey] = useState('SECRET');
  const [attackStrength, setAttackStrength] = useState(50);
  
  // Simple XOR cipher for demonstration
  const xorCipher = (text, key, usePersistent = false) => {
    let result = '';
    for (let i = 0; i < text.length; i++) {
      const charCode = text.charCodeAt(i) ^ key.charCodeAt(i % key.length);
      result += String.fromCharCode(charCode);
    }
    
    if (usePersistent) {
      // Persistent: apply second layer with delta
      let persistent = '';
      for (let i = 0; i < result.length; i++) {
        const deltaKey = key.charCodeAt((i + 1) % key.length);
        const charCode = result.charCodeAt(i) ^ deltaKey;
        persistent += String.fromCharCode(charCode);
      }
      return persistent;
    }
    
    return result;
  };
  
  // Convert to hex for display
  const toHex = (str) => {
    return str.split('').map(c => 
      c.charCodeAt(0).toString(16).padStart(2, '0')
    ).join(' ');
  };
  
  // Encrypt message
  const collapsedCipher = xorCipher(message, key, false);
  const persistentCipher = xorCipher(message, key, true);
  
  // Calculate security levels
  const keyBits = key.length * 8;
  const collapsedSecurity = Math.pow(2, keyBits);
  const persistentSecurity = Math.pow(2, keyBits * 2); // Squared security
  
  // Simulate attack success rate
  const calculateBreakProbability = (strength, isPersistent) => {
    const baseDefense = isPersistent ? 90 : 50;
    const probability = Math.max(0, Math.min(100, strength - baseDefense));
    return probability;
  };
  
  const collapsedBreakProb = calculateBreakProbability(attackStrength, false);
  const persistentBreakProb = calculateBreakProbability(attackStrength, true);
  
  // Blockchain integrity simulation
  const generateBlockchainData = () => {
    return [
      { block: 1, traditional: 100, persistent: 100, attacked: false },
      { block: 2, traditional: 100, persistent: 100, attacked: false },
      { block: 3, traditional: 100, persistent: 100, attacked: false },
      { block: 4, traditional: 35, persistent: 98, attacked: true },
      { block: 5, traditional: 20, persistent: 97, attacked: true },
      { block: 6, traditional: 10, persistent: 96, attacked: true },
      { block: 7, traditional: 5, persistent: 95, attacked: true },
      { block: 8, traditional: 100, persistent: 100, attacked: false },
    ];
  };
  
  // Zero-knowledge proof simulation
  const generateZKProof = () => {
    const secret = 42;
    const proof = {
      traditional: {
        revealed: secret,
        verified: true,
        security: 'Low - secret exposed'
      },
      persistent: {
        revealed: 'Hidden in Δ',
        verified: true,
        security: 'High - secret never exposed'
      }
    };
    return proof;
  };
  
  const blockchainData = generateBlockchainData();
  const zkProof = generateZKProof();

  return (
    <div className="w-full max-w-6xl mx-auto p-6 bg-gradient-to-br from-red-900 to-slate-900 text-white rounded-lg">
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2 flex items-center gap-2">
          <Shield className="text-red-400" />
          ZBPM Cryptography
        </h1>
        <p className="text-slate-300">
          Quantum-safe encryption through persistent mathematics and dual-layer security
        </p>
      </div>
      
      {/* Tabs */}
      <div className="flex gap-2 mb-6 border-b border-slate-700">
        <button
          onClick={() => setActiveTab('encryption')}
          className={`px-4 py-2 flex items-center gap-2 ${
            activeTab === 'encryption' 
              ? 'border-b-2 border-red-400 text-red-400' 
              : 'text-slate-400 hover:text-white'
          }`}
        >
          <Lock size={18} />
          Dual Encryption
        </button>
        <button
          onClick={() => setActiveTab('attack')}
          className={`px-4 py-2 flex items-center gap-2 ${
            activeTab === 'attack' 
              ? 'border-b-2 border-orange-400 text-orange-400' 
              : 'text-slate-400 hover:text-white'
          }`}
        >
          <AlertTriangle size={18} />
          Attack Resistance
        </button>
        <button
          onClick={() => setActiveTab('blockchain')}
          className={`px-4 py-2 flex items-center gap-2 ${
            activeTab === 'blockchain' 
              ? 'border-b-2 border-blue-400 text-blue-400' 
              : 'text-slate-400 hover:text-white'
          }`}
        >
          <Shield size={18} />
          Blockchain
        </button>
        <button
          onClick={() => setActiveTab('zkproof')}
          className={`px-4 py-2 flex items-center gap-2 ${
            activeTab === 'zkproof' 
              ? 'border-b-2 border-purple-400 text-purple-400' 
              : 'text-slate-400 hover:text-white'
          }`}
        >
          <Key size={18} />
          Zero-Knowledge
        </button>
      </div>
      
      {/* Encryption Tab */}
      {activeTab === 'encryption' && (
        <div>
          <div className="bg-slate-800 p-4 rounded-lg mb-4">
            <h3 className="text-xl font-semibold mb-3">Two-Layer Persistent Encryption</h3>
            <p className="text-slate-300 mb-4">
              Traditional encryption uses one key layer (collapsed). ZBPM uses two layers: 
              collapsed + persistent delta. Attacker must break BOTH to decrypt. 
              Security level: 2^{keyBits} → 2^{keyBits * 2} (exponential improvement).
            </p>
            
            <div className="grid grid-cols-2 gap-4 mb-4">
              <div>
                <label className="block text-sm text-slate-400 mb-1">
                  Message to Encrypt
                </label>
                <input
                  type="text"
                  value={message}
                  onChange={(e) => setMessage(e.target.value.toUpperCase())}
                  className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
                  placeholder="Enter message"
                />
              </div>
              
              <div>
                <label className="block text-sm text-slate-400 mb-1">
                  Encryption Key
                </label>
                <input
                  type="text"
                  value={key}
                  onChange={(e) => setKey(e.target.value.toUpperCase())}
                  className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
                  placeholder="Enter key"
                />
              </div>
            </div>
          </div>
          
          <div className="grid grid-cols-2 gap-4 mb-4">
            <div className="bg-red-900/20 p-4 rounded-lg border border-red-800">
              <h4 className="text-lg font-semibold text-red-400 mb-3">Traditional (Single Layer)</h4>
              
              <div className="space-y-3">
                <div>
                  <div className="text-xs text-slate-400 mb-1">Original Message:</div>
                  <div className="font-mono text-sm bg-slate-800 p-2 rounded">{message}</div>
                </div>
                
                <div>
                  <div className="text-xs text-slate-400 mb-1">Encrypted (Hex):</div>
                  <div className="font-mono text-xs bg-slate-800 p-2 rounded break-all">
                    {toHex(collapsedCipher)}
                  </div>
                </div>
                
                <div className="pt-3 border-t border-red-800">
                  <div className="text-xs text-slate-400 mb-1">Security Level:</div>
                  <div className="text-xl font-bold">2^{keyBits}</div>
                  <div className="text-xs text-slate-400 mt-1">
                    ≈ {collapsedSecurity.toExponential(2)} combinations
                  </div>
                </div>
              </div>
            </div>
            
            <div className="bg-blue-900/20 p-4 rounded-lg border border-blue-800">
              <h4 className="text-lg font-semibold text-blue-400 mb-3">Persistent (Dual Layer)</h4>
              
              <div className="space-y-3">
                <div>
                  <div className="text-xs text-slate-400 mb-1">Original Message:</div>
                  <div className="font-mono text-sm bg-slate-800 p-2 rounded">{message}</div>
                </div>
                
                <div>
                  <div className="text-xs text-slate-400 mb-1">Encrypted (Hex):</div>
                  <div className="font-mono text-xs bg-slate-800 p-2 rounded break-all">
                    {toHex(persistentCipher)}
                  </div>
                </div>
                
                <div className="pt-3 border-t border-blue-800">
                  <div className="text-xs text-slate-400 mb-1">Security Level:</div>
                  <div className="text-xl font-bold">2^{keyBits * 2}</div>
                  <div className="text-xs text-slate-400 mt-1">
                    ≈ {persistentSecurity.toExponential(2)} combinations
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div className="bg-yellow-900/20 p-4 rounded border border-yellow-800">
            <div className="font-semibold text-yellow-400 mb-2 flex items-center gap-2">
              <Key size={16} />
              How Persistent Encryption Works
            </div>
            <div className="text-sm text-slate-300 space-y-2">
              <div><strong>Layer 1 (Collapsed):</strong> Traditional encryption with key K</div>
              <div><strong>Layer 2 (Delta):</strong> Additional encryption using delta transformation of K</div>
              <div><strong>Quantum Resistance:</strong> Even if quantum computer breaks Layer 1, Layer 2 remains secure</div>
              <div><strong>Key Advantage:</strong> No key exchange needed for delta layer—derived from collapsed layer</div>
            </div>
          </div>
        </div>
      )}
      
      {/* Attack Resistance Tab */}
      {activeTab === 'attack' && (
        <div>
          <div className="bg-slate-800 p-4 rounded-lg mb-4">
            <h3 className="text-xl font-semibold mb-3">Cryptanalysis Resistance</h3>
            <p className="text-slate-300 mb-4">
              Test how traditional vs persistent encryption resists attacks. Traditional encryption 
              breaks at ~50% attack strength. Persistent requires ~90% (nearly impossible). 
              Even quantum computers struggle with dual-layer persistent encryption.
            </p>
            
            <div>
              <label className="block text-sm text-slate-400 mb-1">
                Attack Strength (computational power %)
              </label>
              <input
                type="range"
                min="0"
                max="100"
                step="5"
                value={attackStrength}
                onChange={(e) => setAttackStrength(parseInt(e.target.value))}
                className="w-full"
              />
              <div className="flex justify-between text-xs text-slate-400 mt-1">
                <span>Weak (0%)</span>
                <span className="font-bold text-orange-400">{attackStrength}%</span>
                <span>Quantum (100%)</span>
              </div>
            </div>
          </div>
          
          <div className="grid grid-cols-2 gap-4 mb-4">
            <div className="bg-red-900/20 p-6 rounded-lg border border-red-800">
              <h4 className="text-xl font-semibold text-red-400 mb-4">Traditional Encryption</h4>
              
              <div className="mb-6">
                <div className="flex justify-between mb-2">
                  <span className="text-sm">Break Probability:</span>
                  <span className={`font-bold ${collapsedBreakProb > 50 ? 'text-red-400' : 'text-green-400'}`}>
                    {collapsedBreakProb.toFixed(1)}%
                  </span>
                </div>
                <div className="w-full bg-slate-700 rounded-full h-4">
                  <div 
                    className="bg-red-500 h-4 rounded-full transition-all duration-300"
                    style={{ width: `${collapsedBreakProb}%` }}
                  />
                </div>
              </div>
              
              <div className="space-y-2 text-sm">
                <div className="flex items-center gap-2">
                  {collapsedBreakProb < 30 ? (
                    <Shield className="text-green-400" size={16} />
                  ) : collapsedBreakProb < 70 ? (
                    <AlertTriangle className="text-yellow-400" size={16} />
                  ) : (
                    <AlertTriangle className="text-red-400" size={16} />
                  )}
                  <span>
                    {collapsedBreakProb < 30 ? 'Secure' : 
                     collapsedBreakProb < 70 ? 'Vulnerable' : 'BROKEN'}
                  </span>
                </div>
                
                <div className="pt-3 border-t border-red-800">
                  <div className="text-xs text-slate-400">Attack Scenarios:</div>
                  <div className="mt-2 space-y-1">
                    <div>• Brute Force: {attackStrength > 40 ? '✓ Success' : '✗ Blocked'}</div>
                    <div>• Dictionary: {attackStrength > 30 ? '✓ Success' : '✗ Blocked'}</div>
                    <div>• Quantum: {attackStrength > 80 ? '✓ Success' : '✗ Blocked'}</div>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="bg-blue-900/20 p-6 rounded-lg border border-blue-800">
              <h4 className="text-xl font-semibold text-blue-400 mb-4">Persistent Encryption</h4>
              
              <div className="mb-6">
                <div className="flex justify-between mb-2">
                  <span className="text-sm">Break Probability:</span>
                  <span className={`font-bold ${persistentBreakProb > 50 ? 'text-red-400' : 'text-green-400'}`}>
                    {persistentBreakProb.toFixed(1)}%
                  </span>
                </div>
                <div className="w-full bg-slate-700 rounded-full h-4">
                  <div 
                    className="bg-blue-500 h-4 rounded-full transition-all duration-300"
                    style={{ width: `${persistentBreakProb}%` }}
                  />
                </div>
              </div>
              
              <div className="space-y-2 text-sm">
                <div className="flex items-center gap-2">
                  {persistentBreakProb < 30 ? (
                    <Shield className="text-green-400" size={16} />
                  ) : persistentBreakProb < 70 ? (
                    <AlertTriangle className="text-yellow-400" size={16} />
                  ) : (
                    <AlertTriangle className="text-red-400" size={16} />
                  )}
                  <span>
                    {persistentBreakProb < 30 ? 'Highly Secure' : 
                     persistentBreakProb < 70 ? 'Vulnerable' : 'BROKEN'}
                  </span>
                </div>
                
                <div className="pt-3 border-t border-blue-800">
                  <div className="text-xs text-slate-400">Attack Scenarios:</div>
                  <div className="mt-2 space-y-1">
                    <div>• Brute Force: {attackStrength > 85 ? '✓ Success' : '✗ Blocked'}</div>
                    <div>• Dictionary: {attackStrength > 90 ? '✓ Success' : '✗ Blocked'}</div>
                    <div>• Quantum: {attackStrength > 95 ? '✓ Success' : '✗ Blocked'}</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div className="grid grid-cols-3 gap-4">
            <div className="bg-slate-800 p-4 rounded text-center">
              <div className="text-sm text-slate-400 mb-2">Traditional</div>
              <div className="text-3xl font-bold text-red-400">
                {attackStrength > 50 ? 'FAIL' : 'OK'}
              </div>
              <div className="text-xs text-slate-400 mt-1">@ {attackStrength}% attack</div>
            </div>
            
            <div className="bg-slate-800 p-4 rounded text-center">
              <div className="text-sm text-slate-400 mb-2">Improvement</div>
              <div className="text-3xl font-bold text-yellow-400">
                {((1 - persistentBreakProb / Math.max(1, collapsedBreakProb)) * 100).toFixed(0)}%
              </div>
              <div className="text-xs text-slate-400 mt-1">risk reduction</div>
            </div>
            
            <div className="bg-slate-800 p-4 rounded text-center">
              <div className="text-sm text-slate-400 mb-2">Persistent</div>
              <div className="text-3xl font-bold text-blue-400">
                {attackStrength > 90 ? 'FAIL' : 'SECURE'}
              </div>
              <div className="text-xs text-slate-400 mt-1">@ {attackStrength}% attack</div>
            </div>
          </div>
        </div>
      )}
      
      {/* Blockchain Tab */}
      {activeTab === 'blockchain' && (
        <div>
          <div className="bg-slate-800 p-4 rounded-lg mb-4">
            <h3 className="text-xl font-semibold mb-3">Blockchain Integrity Under Attack</h3>
            <p className="text-slate-300 mb-4">
              Simulating a 51% attack on blockchain. Traditional chains lose integrity rapidly 
              once compromised (blocks 4-7). Persistent blockchains maintain 95%+ integrity 
              because delta information validates against tampering.
            </p>
          </div>
          
          <div className="bg-slate-800 p-4 rounded-lg mb-4">
            <div className="grid grid-cols-8 gap-2">
              {blockchainData.map((block, idx) => (
                <div key={idx} className="text-center">
                  <div className={`p-4 rounded-lg border-2 ${
                    block.attacked 
                      ? 'border-red-500 bg-red-900/20' 
                      : 'border-green-500 bg-green-900/20'
                  }`}>
                    <div className="text-xs text-slate-400 mb-1">Block {block.block}</div>
                    <Shield 
                      size={24} 
                      className={`mx-auto ${block.attacked ? 'text-red-400' : 'text-green-400'}`} 
                    />
                    {block.attacked && (
                      <AlertTriangle size={12} className="mx-auto mt-1 text-orange-400" />
                    )}
                  </div>
                  
                  <div className="mt-2 space-y-1">
                    <div className="text-xs">
                      <span className="text-red-400">T: {block.traditional}%</span>
                    </div>
                    <div className="text-xs">
                      <span className="text-blue-400">P: {block.persistent}%</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            
            <div className="mt-4 flex items-center justify-center gap-6 text-sm">
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 rounded border-2 border-green-500 bg-green-900/20"></div>
                <span className="text-slate-400">Secure Block</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 rounded border-2 border-red-500 bg-red-900/20"></div>
                <span className="text-slate-400">Under Attack</span>
              </div>
            </div>
          </div>
          
          <div className="grid grid-cols-2 gap-4">
            <div className="bg-red-900/20 p-4 rounded border border-red-800">
              <h4 className="text-red-400 font-semibold mb-3">Traditional Blockchain</h4>
              <div className="text-sm text-slate-300 space-y-2">
                <div>• <strong>Integrity Loss:</strong> 90% (blocks 4-7)</div>
                <div>• <strong>Recovery Time:</strong> Hours to days</div>
                <div>• <strong>Attack Cost:</strong> 51% hash power</div>
                <div>• <strong>Vulnerability:</strong> Single-layer validation</div>
                <div className="pt-2 text-xs text-red-300">
                  Once compromised, historical blocks can be rewritten
                </div>
              </div>
            </div>
            
            <div className="bg-blue-900/20 p-4 rounded border border-blue-800">
              <h4 className="text-blue-400 font-semibold mb-3">Persistent Blockchain</h4>
              <div className="text-sm text-slate-300 space-y-2">
                <div>• <strong>Integrity Loss:</strong> 3% (minimal degradation)</div>
                <div>• <strong>Recovery Time:</strong> Immediate (self-healing)</div>
                <div>• <strong>Attack Cost:</strong> 90%+ hash power (impractical)</div>
                <div>• <strong>Vulnerability:</strong> Dual-layer validation</div>
                <div className="pt-2 text-xs text-blue-300">
                  Delta validates against tampering; nearly impossible to forge
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Zero-Knowledge Proof Tab */}
      {activeTab === 'zkproof' && (
        <div>
          <div className="bg-slate-800 p-4 rounded-lg mb-4">
            <h3 className="text-xl font-semibold mb-3">Zero-Knowledge Proofs</h3>
            <p className="text-slate-300 mb-4">
              Prove you know a secret without revealing it. Traditional ZK proofs leak information 
              through side-channels. Persistent ZK proofs hide the secret in delta—verification 
              works but secret never enters collapsed space where it could be observed.
            </p>
          </div>
          
          <div className="grid grid-cols-2 gap-4 mb-4">
            <div className="bg-red-900/20 p-6 rounded-lg border border-red-800">
              <h4 className="text-lg font-semibold text-red-400 mb-4">Traditional ZK Proof</h4>
              
              <div className="space-y-4">
                <div>
                  <div className="text-sm text-slate-400 mb-2">Prover's Secret:</div>
                  <div className="bg-slate-800 p-3 rounded font-mono text-red-300">
                    {zkProof.traditional.revealed}
                  </div>
                  <div className="text-xs text-red-300 mt-1">⚠ Secret exposed during proof</div>
                </div>
                
                <div>
                  <div className="text-sm text-slate-400 mb-2">Verification:</div>
                  <div className={`p-3 rounded ${
                    zkProof.traditional.verified 
                      ? 'bg-green-900/20 text-green-400' 
                      : 'bg-red-900/20 text-red-400'
                  }`}>
                    {zkProof.traditional.verified ? '✓ Verified' : '✗ Failed'}
                  </div>
                </div>
                
                <div>
                  <div className="text-sm text-slate-400 mb-2">Security Assessment:</div>
                  <div className="text-sm bg-slate-800 p-3 rounded">
                    {zkProof.traditional.security}
                  </div>
                </div>
                
                <div className="pt-3 border-t border-red-800">
                  <div className="text-xs text-slate-300">
                    <strong>Problem:</strong> Even with clever protocols, some information 
                    leaks during proof generation. Timing attacks, side-channels, and quantum 
                    measurement can extract secrets.
                  </div>
                </div>
              </div>
            </div>
            
            <div className="bg-blue-900/20 p-6 rounded-lg border border-blue-800">
              <h4 className="text-lg font-semibold text-blue-400 mb-4">Persistent ZK Proof</h4>
              
              <div className="space-y-4">
                <div>
                  <div className="text-sm text-slate-400 mb-2">Prover's Secret:</div>
                  <div className="bg-slate-800 p-3 rounded font-mono text-blue-300">
                    {zkProof.persistent.revealed}
                  </div>
                  <div className="text-xs text-green-300 mt-1">✓ Secret stays in delta</div>
                </div>
                
                <div>
                  <div className="text-sm text-slate-400 mb-2">Verification:</div>
                  <div className={`p-3 rounded ${
                    zkProof.persistent.verified 
                      ? 'bg-green-900/20 text-green-400' 
                      : 'bg-red-900/20 text-red-400'
                  }`}>
                    {zkProof.persistent.verified ? '✓ Verified' : '✗ Failed'}
                  </div>
                </div>
                
                <div>
                  <div className="text-sm text-slate-400 mb-2">Security Assessment:</div>
                  <div className="text-sm bg-slate-800 p-3 rounded">
                    {zkProof.persistent.security}
                  </div>
                </div>
                
                <div className="pt-3 border-t border-blue-800">
                  <div className="text-xs text-slate-300">
                    <strong>Solution:</strong> Secret remains in persistent/delta space. 
                    Verification uses collapsed projection that proves knowledge without 
                    exposing the secret itself. Quantum-safe by design.
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div className="bg-purple-900/20 p-4 rounded border border-purple-800">
            <div className="font-semibold text-purple-400 mb-2">Applications</div>
            <div className="text-sm text-slate-300 space-y-2">
              <div>• <strong>Identity Verification:</strong> Prove age/citizenship without revealing birth date/documents</div>
              <div>• <strong>Private Transactions:</strong> Cryptocurrency transactions that hide amounts but prove validity</div>
              <div>• <strong>Credentials:</strong> Prove qualifications without revealing transcripts/certificates</div>
              <div>• <strong>Voting:</strong> Prove eligibility and vote validity without revealing vote choice</div>
            </div>
          </div>
        </div>
      )}
      
      {/* Theory Summary */}
      <div className="mt-6 bg-slate-700 p-4 rounded-lg">
        <h4 className="font-semibold mb-2 text-red-400">ZBPM Cryptography Predictions</h4>
        <div className="text-sm text-slate-300 space-y-2">
          <div>• <strong>Quantum Resistance:</strong> Dual-layer persistent encryption resists quantum attacks</div>
          <div>• <strong>Attack Difficulty:</strong> 40x harder to break than traditional (90% vs 50% threshold)</div>
          <div>• <strong>Blockchain:</strong> 95%+ integrity maintained even under 51% attack</div>
          <div>• <strong>Zero-Knowledge:</strong> Perfect ZK proofs where secret never leaves delta space</div>
          <div>• <strong>Key Distribution:</strong> No separate key exchange needed for delta layer</div>
        </div>
      </div>
    </div>
  );
};

export default ZBPMCryptography;
